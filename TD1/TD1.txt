TD1 Bloc 1 - SLAM


1 - Méthode GET & Méthode POST 
La méthode GET est utilisé dans le cas d'une personnalisation de page Web (filtres, favoris, saisies de recherche...) elle stocke les données sans les chiffrés permettant à l'utilisateur à son retour sur celle-ci de toutes les récuperer directement, avec GET les données sont rendus visibles dans l'URL. Utilisé en général pour recevoir les réponses serveur.
La méthode POST quant à elle est utilisé dans le cas d'un besoin de confidentialité (soumettre des données personnelles par le biais d'un formulaire ou télécharger des photos) dans cette méthode les données sont rendues invisibles dans l'URL. Utilisé en génral pour transmettre vers un serveur (données personnelles saisis en formulaire, photos, vidéos...)

2 - CF fichier PNG (Tableau GET & POST)

3 - Le protocole HTTP est extensible car il transite par TCP ou TLS et permet de récuperer en réponse tout sortes de données (images, vidéos, documents, renvois de formulaires HTML vers serveurs)
Il permet d'intégrer des en-têtes qui offrent différentes transmissions (en-têtes général, requête, réponse, d'entité) 

4 - HTTP est sans état car il ne permet pas le lien entre plusieurs requêtes, plusieurs solutions sont possibles pour contrer ce problème par le biais de cookies et l'extensibilité des en-têtes

5 - Décomposition d'une URL : commence toujours par un protocole qui peut être dissimulé par le naviguateur (http(s)://), suivi d'un sous-domaine (en général www. mais peut être personnalisé), un nom de domaine qui devra être acheté (personnalisé), le nom de domaine se termine toujours par .(com/org/fr/ru/gouv... selon l'origine du site) ce qui suivra dans l'URL sera separé du reste par un / et indiquera le chemin (path) en requête vers le serveur.

6 - 5 familles de codes de réponse HTTP 

1) Réponses informatives - ont pour but d'informer l'utilisateur d'une réponse à venir du serveur, de répondre aux en-têtes upgrade afin d'informer du protocole sur le serveur, permet aussi de répondre aux en-êtes link qui permettent de précharger en attendant la réponse serveur (Continue/Switching Protocols/Processing/Early Hints)
2) Réponses de Succès - permet de valider la réussite de la requête variant en fonction de la méthode HTTP employé (GET, POST...) (200 OK)
3) Réponses de redirection - dans le cas d'une requête qui possède plusieurs réponses possibles, à pour but dans ce cas de rediriger l'utilisateur vers les différentes possibilités. Pas de manière standard pour choisir une possibilité mais il est conseillé de le faire sous forme de liens HTML. (Multiple Choices)
4) Réponses d'erreur - dans le cas d'une incompréhension du serveur concernant la requête pour une erreur de synthaxe ou pour un manque de permission de la part de l'utilisateur nécessitant une authentification ou bloquant simplement l'accès. (Bad Request, Not Authorized, Forbidden)
5) Répones d'erreur côté serveur - dans le cas d'une situation qu'il ne peut pas traider (Internal Server Error)

7 - Le principe de la négociation entre le client et le serveur est qu'un client transmet une requête au serveur par le biais d'une URL pour obtenir une ressource. Le serveur utilise ensuite l'URL pour choisir parmis les différentes variantes (appelés représentations) en sa possession, il renvoie ensuite la représentation vers le client par le biais d'une URL spécifique.
La représentation la plus adaptée est choisie selon l'un de ces deux mécanismes : 
- En-têtes HTTP spécifiques (envoyé par le client) : méthode standard de négociation
- Codes de réponse HTTP (type Multiple Choices, Not Acceptable, Unsupported Media Type)(envoyé par le serveur) utilisés comme mécanisme de recours.

9 - 1/2) curl dev.local -v 

*   Trying 127.0.0.1:80...
* Connected to dev.local (127.0.0.1) port 80 (#0)
> GET / HTTP/1.1
> Host: dev.local
> User-Agent: curl/8.0.1
> Accept: */*
>
< HTTP/1.1 403 Forbidden
< Date: Wed, 20 Sep 2023 12:18:40 GMT
< Server: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6
< Content-Length: 298
< Content-Type: text/html; charset=iso-8859-1
<
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>403 Forbidden</title>
</head><body>
<h1>Forbidden</h1>
<p>You don't have permission to access this resource.</p>
<hr>
<address>Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6 Server at dev.local Port 80</address>
</body></html>
* Connection #0 to host dev.local left intact

3/4) curl dev.local/notExisting -v

*   Trying 127.0.0.1:80...
* Connected to dev.local (127.0.0.1) port 80 (#0)
> GET /notExisting HTTP/1.1
> Host: dev.local
> User-Agent: curl/8.0.1
> Accept: */*
>
< HTTP/1.1 403 Forbidden
< Date: Wed, 20 Sep 2023 12:19:28 GMT
< Server: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6
< Content-Length: 298
< Content-Type: text/html; charset=iso-8859-1
<
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>403 Forbidden</title>
</head><body>
<h1>Forbidden</h1>
<p>You don't have permission to access this resource.</p>
<hr>
<address>Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6 Server at dev.local Port 80</address>
</body></html>
* Connection #0 to host dev.local left intact

6) curl -output localhost
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   360  100   360    0     0  16564      0 --:--:-- --:--:-- --:--:-- 16363
